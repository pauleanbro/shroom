import * as PIXI from "pixi.js";
import { Observable } from "rxjs";
import { EventEmitter } from "../events/EventEmitter";
import { IEventGroup } from "../events/interfaces/IEventGroup";
import { IEventManager } from "../events/interfaces/IEventManager";
import { IEventManagerEvent } from "../events/interfaces/IEventManagerEvent";
import { IEventTarget } from "../events/interfaces/IEventTarget";
import { Hitmap } from "../furniture/util/loadFurni";
import { Rectangle } from "../room/IRoomRectangle";
import { HitTexture } from "./HitTexture";
export type HitEventHandler = (event: IEventManagerEvent) => void;
export declare class HitSprite extends PIXI.Sprite implements IEventTarget {
    private _group;
    private _hitTexture;
    private _tag;
    private _mirrored;
    private _ignore;
    private _ignoreMouse;
    private _eventManager;
    private _rectangleSubject;
    private _eventEmitter;
    private _getHitmap;
    get events(): EventEmitter<HitSpriteEventMap>;
    constructor({ eventManager, mirrored, getHitmap, tag, group, }: {
        eventManager: IEventManager;
        getHitmap?: () => Hitmap;
        mirrored?: boolean;
        tag?: string;
        group: IEventGroup;
    });
    getGroup(): IEventGroup;
    getRectangleObservable(): Observable<Rectangle | undefined>;
    getEventZOrder(): number;
    triggerPointerTargetChanged(event: IEventManagerEvent): void;
    triggerClick(event: IEventManagerEvent): void;
    triggerPointerDown(event: IEventManagerEvent): void;
    triggerPointerUp(event: IEventManagerEvent): void;
    triggerPointerOver(event: IEventManagerEvent): void;
    triggerPointerOut(event: IEventManagerEvent): void;
    createDebugSprite(): PIXI.Sprite | undefined;
    get ignoreMouse(): boolean;
    set ignoreMouse(value: boolean);
    get group(): IEventGroup;
    get ignore(): boolean;
    set ignore(value: boolean);
    get mirrored(): boolean;
    set mirrored(value: boolean);
    get hitTexture(): HitTexture | undefined;
    set hitTexture(value: HitTexture | undefined);
    getHitDetectionZIndex(): number;
    destroy(): void;
    getHitBox(): Rectangle;
    hits(x: number, y: number): boolean;
    updateTransform(): void;
}
export type HitSpriteEventMap = {
    click: IEventManagerEvent;
    pointerup: IEventManagerEvent;
    pointerdown: IEventManagerEvent;
    pointerover: IEventManagerEvent;
    pointerout: IEventManagerEvent;
    pointertargetchanged: IEventManagerEvent;
};
