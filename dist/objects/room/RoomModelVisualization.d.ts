import * as PIXI from "pixi.js";
import { Subject } from "rxjs";
import { IRoomVisualization, MaskNode, PartNode } from "../../interfaces/IRoomVisualization";
import { RoomPosition } from "../../types/RoomPosition";
import { EventManager } from "../events/EventManager";
import { ILandscapeContainer } from "./ILandscapeContainer";
import { IRoomRectangle, Rectangle } from "./IRoomRectangle";
import { ParsedTileMap } from "./ParsedTileMap";
import { IRoomPart } from "./parts/IRoomPart";
export declare class RoomModelVisualization extends PIXI.Container implements IRoomVisualization, IRoomRectangle, ILandscapeContainer {
    private _eventManager;
    private _application;
    readonly parsedTileMap: ParsedTileMap;
    private _hideTileCursor;
    private _hideWalls;
    private _hideFloor;
    private _wallLeftColor;
    private _wallRightColor;
    private _wallTopColor;
    private _tileLeftColor;
    private _tileRightColor;
    private _tileTopColor;
    private _positionalContainer;
    private _behindWallLayer;
    private _wallLayer;
    private _tileLayer;
    private _primaryLayer;
    private _landscapeLayer;
    private _wallHitAreaLayer;
    private _masksLayer;
    private _wallTexture;
    private _floorTexture;
    private _walls;
    private _tiles;
    private _tileCursors;
    private _masks;
    private _parts;
    private _borderWidth;
    private _tileHeight;
    private _wallHeight;
    private _onActiveTileChange;
    private _onActiveWallChange;
    private _onTileClick;
    private _tileMapBounds;
    private _refreshRoom;
    private _rebuildRoom;
    constructor(_eventManager: EventManager, _application: PIXI.Application, parsedTileMap: ParsedTileMap);
    addPart(part: IRoomPart): PartNode;
    getMaskLevel(roomX: number, roomY: number): {
        roomX: number;
        roomY: number;
    };
    get onTileClick(): Subject<RoomPosition>;
    get hideFloor(): boolean;
    set hideFloor(value: boolean);
    get hideWalls(): boolean;
    set hideWalls(value: boolean);
    get hideTileCursor(): boolean;
    set hideTileCursor(value: boolean);
    get wallTexture(): PIXI.Texture | undefined;
    set wallTexture(value: PIXI.Texture | undefined);
    get floorTexture(): PIXI.Texture | undefined;
    set floorTexture(value: PIXI.Texture | undefined);
    get wallHeight(): number;
    set wallHeight(value: number);
    get tileHeight(): number;
    set tileHeight(value: number);
    get wallDepth(): number;
    set wallDepth(value: number);
    get roomBounds(): {
        minX: number;
        maxX: number;
        minY: number;
        maxY: number;
    };
    get rectangle(): Rectangle;
    get wallLeftColor(): number | undefined;
    set wallLeftColor(value: number | undefined);
    get wallRightColor(): number | undefined;
    set wallRightColor(value: number | undefined);
    get wallTopColor(): number | undefined;
    set wallTopColor(value: number | undefined);
    get tileLeftColor(): number | undefined;
    set tileLeftColor(value: number | undefined);
    get tileRightColor(): number | undefined;
    set tileRightColor(value: number | undefined);
    get tileTopColor(): number | undefined;
    set tileTopColor(value: number | undefined);
    get onActiveTileChange(): import("rxjs").Observable<RoomPosition>;
    get onActiveWallChange(): import("rxjs").Observable<{
        roomX: number;
        roomY: number;
        offsetX: number;
        offsetY: number;
        wall: "l" | "r";
    } | undefined>;
    get container(): PIXI.Container;
    get behindWallContainer(): PIXI.Container;
    get landscapeContainer(): PIXI.Container;
    get floorContainer(): PIXI.Container;
    get wallContainer(): PIXI.Container;
    destroy(): void;
    addMask(id: string, element: PIXI.Sprite): MaskNode;
    getScreenPosition(roomX: number, roomY: number, roomZ: number): {
        x: number;
        y: number;
    };
    private _getCurrentRoomPartData;
    private _setCache;
    private _getLargestWallHeight;
    private _destroyAllSprites;
    private _updateHeightmap;
    private _updateParts;
    private _createHeightmapElement;
    private _createStairCorner;
    private _createStair;
    private _createDoor;
    private _createTileElement;
    private _createTileCursor;
    private _handleTick;
    private _createRightWall;
    private _createLeftWall;
    private _createOuterBorder;
    private _createWallElement;
    private _getPosition;
}
